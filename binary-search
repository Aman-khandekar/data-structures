//////    find left most occurence and right most occurence  /////

public class Patterns {
    static int leftOccurence(int arr[], int size, int key) {
        int start = 0;
        int end = size - 1;
        int mid = start + (end - start) / 2;
        int ans = -1;
        while (start <= end) {
            if (arr[mid] == key) {
                ans = mid;
                end = mid - 1;

            } else if (key > arr[mid]) {
                start = mid + 1;

            } else if (key < arr[mid]) {
                end = mid - 1;

            }
            mid = start + (end - start) / 2;
        }
        return ans;
    }

    static int rightOccurence(int arr[], int size, int key) {
        int start = 0;
        int end = size - 1;
        int mid = start + (end - start) / 2;
        int ans = -1;
        while (start <= end) {
            if (arr[mid] == key) {
                ans = mid;
                start = mid + 1;

            } else if (key > arr[mid]) {
                start = mid + 1;

            } else if (key < arr[mid]) {

                end = mid - 1;
            }

            mid = start + (end - start) / 2;
        }
        return ans;
    }

    public static void main(String[] args) {

        int even[] = { 2, 3, 4, 4, 4, 4, 4, 6, 8, 9, 10, 11, 12 };
        int odd[] = { 3, 5, 5, 5, 5, 5, 5, 7, 9, 11, 13, 15, 15 };

        int index = leftOccurence(even, 13, 4);

        int index1 = rightOccurence(odd, 13, 5);
        System.out.println("leftoccurence  of  4 in even array is " + index);
        System.out.println("rightoccurence of  5 in odd array  is " + index1);

    }

}
